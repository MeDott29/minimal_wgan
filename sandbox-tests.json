{
  "testCases": [
    {
      "id": "basic-001",
      "description": "Basic arithmetic and console logging",
      "script": "const a = 5;\nconst b = 3;\nconsole.log('Computing...');\nconst result = a + b;\n({ result })",
      "expectedOutput": { "result": 8 },
      "shouldSucceed": true
    },
    {
      "id": "memory-001",
      "description": "Memory limit test - array growth",
      "script": "const arr = [];\nfor(let i = 0; i < 1000000; i++) {\n  arr.push(new Array(1000).fill('test'));\n}\narr.length",
      "expectedOutput": null,
      "shouldSucceed": false
    },
    {
      "id": "timeout-001",
      "description": "Timeout test - infinite loop",
      "script": "let i = 0;\nwhile(true) { i++; }",
      "expectedOutput": null,
      "shouldSucceed": false
    },
    {
      "id": "security-001",
      "description": "Blocked API test - process access attempt",
      "script": "console.log(process.env)",
      "expectedOutput": null,
      "shouldSucceed": false
    },
    {
      "id": "security-002",
      "description": "Blocked API test - require attempt",
      "script": "const fs = require('fs')",
      "expectedOutput": null,
      "shouldSucceed": false
    },
    {
      "id": "security-003",
      "description": "Blocked API test - eval attempt",
      "script": "eval('2 + 2')",
      "expectedOutput": null,
      "shouldSucceed": false
    },
    {
      "id": "calls-001",
      "description": "Call limit test - console.log flood",
      "script": "for(let i = 0; i < 20000; i++) { console.log(i); }",
      "expectedOutput": null,
      "shouldSucceed": false
    },
    {
      "id": "scope-001",
      "description": "Scope isolation test - global object access",
      "script": "console.log(global); console.log(window);",
      "expectedOutput": null,
      "shouldSucceed": false
    },
    {
      "id": "math-001",
      "description": "Safe API test - Math operations",
      "script": "const result = Math.sqrt(16) + Math.pow(2, 3);\n({ result })",
      "expectedOutput": { "result": 12 },
      "shouldSucceed": true
    },
    {
      "id": "context-001",
      "description": "Context modification attempt",
      "script": "Object.defineProperty(Object.prototype, 'malicious', { value: true });\ntrue",
      "expectedOutput": null,
      "shouldSucceed": false
    }
  ]
}